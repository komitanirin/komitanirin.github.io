<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Komitani</title>
    <link>https://mementomori.com.cn/</link>
    
    <atom:link href="https://mementomori.com.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>for Rin</description>
    <pubDate>Tue, 25 Jun 2024 07:32:59 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>扩展方法讲解</title>
      <link>https://mementomori.com.cn/2024/06/24/%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</link>
      <guid>https://mementomori.com.cn/2024/06/24/%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Mon, 24 Jun 2024 07:53:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;扩展方法是一种特殊类型的静态方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于一个C#类型，如类（包括密封类）、值类型、接口等，扩展方法可以在不改变该类型源码的前提下，为它的实例提供新的成员。因此，若要为一个框架或第三方库的某个类型增加辅助功能，通过扩展方法就可以轻而易举地实现，这也是“扩展”的意义所在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用范围&lt;/strong&gt;：所有.NET Framework 中已有的类型&lt;/p&gt;
&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>扩展方法是一种特殊类型的静态方法。</strong></p><p>对于一个C#类型，如类（包括密封类）、值类型、接口等，扩展方法可以在不改变该类型源码的前提下，为它的实例提供新的成员。因此，若要为一个框架或第三方库的某个类型增加辅助功能，通过扩展方法就可以轻而易举地实现，这也是“扩展”的意义所在。</p><p><strong>作用范围</strong>：所有.NET Framework 中已有的类型</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol><li>扩展方法必须声明在静态类中。</li><li>扩展方法必须是 static，并且必须包含 this 关键字作为第一个参数，该参数指定了将扩展方法应用到的类型。</li><li>this 关键字后面跟着扩展方法的形参列表。</li><li>扩展方法可以是任何访问修饰符，例如 public、private、protected 等。</li><li>在调用代码中，添加 using 指令，用于指定包含扩展方法类的<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/namespace">命名空间</a>。</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CustomExtensions</span>&#123;</span><br><span class="line">    <span class="comment">//扩展类-扩展方法--静态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> calss StringExtension&#123;</span><br><span class="line">        <span class="comment">//this作为第一个参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">WordCount</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> str.Split(<span class="keyword">new</span> <span class="built_in">char</span>[]&#123;<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;?&#x27;</span>&#125;, StringSplitOptions.RemoveEmptyEntries).Length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Extension_Methods</span>&#123;</span><br><span class="line">    <span class="comment">//using 指令</span></span><br><span class="line">    <span class="keyword">using</span> CustomExtensions;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;The quick brown fox jumped over the lazy dog.&quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> i = s.WordCount();</span><br><span class="line">            System.Console.WriteLine(<span class="string">&quot;Word count of s is &#123;0&#125;&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在编译时绑定扩展方法"><a href="#在编译时绑定扩展方法" class="headerlink" title="在编译时绑定扩展方法"></a>在编译时绑定扩展方法</h2><p><strong>可以使用扩展方法来扩展类或接口，但不能重写扩展方法。</strong></p><ul><li>与接口或类方法具有相同名称和签名的扩展方法永远不会被调用。</li></ul><p>编译时，扩展方法的优先级总是比类型本身中定义的实例方法低。 换句话说，如果某个类型具有一个名为 Process(int i) 的方法，而你有一个具有相同签名的扩展方法，则编译器总是<strong>绑定到该实例方法。</strong></p><p>当编译器遇到方法调用时，它首先在该类型的实例方法中寻找匹配的方法。 如果未找到任何匹配方法，编译器将搜索为该类型定义的任何扩展方法，<strong>并且绑定到它找到的第一个扩展方法。</strong></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面的示例演示 C# 编译器在确定是将方法调用绑定到类型上的实例方法还是绑定到扩展方法时所遵循的规则。 静态类 Extensions 包含为任何实现了 IMyInterface 的类型定义的扩展方法。 类 A、B 和 C 都实现了该接口。</p><p>MethodB 扩展方法永远不会被调用，因为它的名称和签名与这些类已经实现的方法完全匹配。</p><p>如果编译器找不到具有匹配签名的实例方法，它会绑定到匹配的扩展方法（如果存在这样的方法）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define an interface named IMyInterface.</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DefineIMyInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Any class that implements IMyInterface must define a method</span></span><br><span class="line">        <span class="comment">// that matches the following signature.</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">MethodB</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define extension methods for IMyInterface.</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Extensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> System;</span><br><span class="line">    <span class="keyword">using</span> DefineIMyInterface;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The following extension methods can be accessed by instances of any</span></span><br><span class="line">    <span class="comment">// class that implements IMyInterface.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Extension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MethodA</span>(<span class="params"><span class="keyword">this</span> IMyInterface myInterface, <span class="built_in">int</span> i</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine</span><br><span class="line">                (<span class="string">&quot;Extension.MethodA(this IMyInterface myInterface, int i)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MethodA</span>(<span class="params"><span class="keyword">this</span> IMyInterface myInterface, <span class="built_in">string</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine</span><br><span class="line">                (<span class="string">&quot;Extension.MethodA(this IMyInterface myInterface, string s)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This method is never called in ExtensionMethodsDemo1, because each</span></span><br><span class="line">        <span class="comment">// of the three classes A, B, and C implements a method named MethodB</span></span><br><span class="line">        <span class="comment">// that has a matching signature.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MethodB</span>(<span class="params"><span class="keyword">this</span> IMyInterface myInterface</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine</span><br><span class="line">                (<span class="string">&quot;Extension.MethodB(this IMyInterface myInterface)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define three classes that implement IMyInterface, and then use them to test</span></span><br><span class="line"><span class="comment">// the extension methods.</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExtensionMethodsDemo1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> System;</span><br><span class="line">    <span class="keyword">using</span> Extensions;</span><br><span class="line">    <span class="keyword">using</span> DefineIMyInterface;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span> : <span class="title">IMyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodB</span>()</span> &#123; Console.WriteLine(<span class="string">&quot;A.MethodB()&quot;</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">B</span> : <span class="title">IMyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodB</span>()</span> &#123; Console.WriteLine(<span class="string">&quot;B.MethodB()&quot;</span>); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodA</span>(<span class="params"><span class="built_in">int</span> i</span>)</span> &#123; Console.WriteLine(<span class="string">&quot;B.MethodA(int i)&quot;</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">C</span> : <span class="title">IMyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodB</span>()</span> &#123; Console.WriteLine(<span class="string">&quot;C.MethodB()&quot;</span>); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodA</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;C.MethodA(object obj)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><strong>要为某个类型扩展功能，但没有其源码，比如某个框架或第三方库中的一个类；</strong></li></ol><p>例如，想要获取一个列表中所有的奇数项，就可以为IList<code>&lt;T&gt;</code>接口增加一个扩展方法，这里的IList<code>&lt;T&gt;</code>接口本身是.NET框架中的接口。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IListExtentions</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">T</span>&gt; <span class="title">OddTrems</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> IEnumerable&lt;T&gt;list</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list ==<span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(list))</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;list.Count();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">yield</span> <span class="keyword">return</span> list.ElementAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>即使可以访问原有类型的源码，也可以使用扩展方法为它添加辅助功能；</strong></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILog</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="built_in">string</span> message,LogLevel logLevel</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ILogExtensions</span>&#123;</span><br><span class="line">    <span class="comment">//记录调试信息</span></span><br><span class="line">    <span class="comment">//扩展方法，方便记录调试信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LogDebug</span>(<span class="params"><span class="keyword">this</span> ILog logger,<span class="built_in">string</span> meassage</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line">            logger?.Log(<span class="string">$&quot;<span class="subst">&#123;message&#125;</span>&quot;</span>,LogLevel.Debug);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>为接口添加方法</strong></li></ol><p>通过扩展方法，我们可以为接口类型添加新的方法，在不破坏已有代码的前提下为接口类型添加额外的功能。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPrintable</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="comment">//新的方法 PrintInColor()，用于打印带有颜色的文本。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintInColor</span>(<span class="params"><span class="keyword">this</span> IPrintable printable,ConsoleColor color</span>)</span>&#123;</span><br><span class="line">   Console.ForegroundColor = color;</span><br><span class="line">    printable.Print();</span><br><span class="line">    Console.ResetColor();.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>以下是定义与使扩展方法时的一些注意事项和最佳实践：<br>1、扩展方法本质上是为原有类型提供辅助功能，因此，在创建时，要确保它具有实际意义，且遵循单一职责原则；也即，不能过度使用扩展方法并且它能够完成一个具体、完整的功能；<br>2、扩展方法本身具有通用性，因此，它里面应避免特定的业务数据类型及其相关逻辑；<br>3、如果为接口增加扩展方法，扩展方法的命名空间可以与接口的一致；否则，应尽量避免与原类型写在同一命名空间下，这样会“污染”原类型。建议的做法是为扩展方法所在的类设定一个单独的命名空间，如：<code>&lt;Company&gt;</code>.<code>&lt;Product&gt;</code>.Extentions。不过，这样做也有缺点：在操作原有类型的实例时，如果不引用扩展方法所在的命名空间，那么，它就不容易被发现，而解决这个问题的办法是，尽量将扩展方法文档化，并告诉项目组的其他开发人员；<br>4、为接口增加扩展方法后，则所有实现此接口的类都会包含该扩展方法；<br>5、在扩展方法中，要对第一个参数进行非空检查，如果为空，应抛出ArgumentNullException（参数为空）异常。</p>]]></content:encoded>
      
      
      
      
      <comments>https://mementomori.com.cn/2024/06/24/%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Foreword</title>
      <link>https://mementomori.com.cn/2024/06/04/Foreword/</link>
      <guid>https://mementomori.com.cn/2024/06/04/Foreword/</guid>
      <pubDate>Tue, 04 Jun 2024 14:56:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;如果六级词汇还没变得陌生，Foreword指的是前言的意思吧。搭建博客时令我费心的不是样式，而是内容的分类，对于自己人生，究竟该如何划分呈现才显得不至于让他人，让自己唾弃呢？不过思来想去，这故作伤感的生活点点滴滴也会沾污的污水一样，被自己下意识的拭去吧。自己从未幻想过雨后结</description>
        
      
      
      
      <content:encoded><![CDATA[<p>如果六级词汇还没变得陌生，Foreword指的是前言的意思吧。搭建博客时令我费心的不是样式，而是内容的分类，对于自己人生，究竟该如何划分呈现才显得不至于让他人，让自己唾弃呢？不过思来想去，这故作伤感的生活点点滴滴也会沾污的污水一样，被自己下意识的拭去吧。自己从未幻想过雨后结晶的奇迹，不过还恳求允许我把遗书称作告白信吧，不然撞见遗书二字，除了给予人一种将死末路的印象的恐怖，似乎别无他物，只得让我稍加伪装，请权当单相思女子的痴情，像对待不被看在眼中的追求信，回绝我这封告白信吧，若是写给自己的信，我也同样应当给予拒绝，不是吗？</p>]]></content:encoded>
      
      
      
      
      <comments>https://mementomori.com.cn/2024/06/04/Foreword/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
